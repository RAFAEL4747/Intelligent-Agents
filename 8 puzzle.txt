import numpy as np
import heapq

class PuzzleState:
    def __init__(self, board, empty_pos, moves=0, prev=None):
        self.board = board
        self.empty_pos = empty_pos
        self.moves = moves
        self.prev = prev
        self.goal = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 0]])

    def is_goal(self):
        return np.array_equal(self.board, self.goal)

    def get_moves(self):
        x, y = self.empty_pos
        return [(x + dx, y + dy) for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)] if 0 <= x + dx < 3 and 0 <= y + dy < 3]

    def move(self, new_pos):
        new_board = self.board.copy()
        new_board[self.empty_pos], new_board[new_pos] = new_board[new_pos], new_board[self.empty_pos]
        return PuzzleState(new_board, new_pos, self.moves + 1, self)

    def heuristic(self):
        return sum(abs(i - (val - 1) // 3) + abs(j - (val - 1) % 3) for i, row in enumerate(self.board) for j, val in enumerate(row) if val)

    def __lt__(self, other):
        return (self.moves + self.heuristic()) < (other.moves + other.heuristic())

def a_star_search(initial_board):
    empty_pos = tuple(map(int, np.argwhere(initial_board == 0)[0]))
    initial_state = PuzzleState(initial_board, empty_pos)
    queue, visited = [initial_state], set()

    while queue:
        current = heapq.heappop(queue)
        if current.is_goal():
            return current
        visited.add(tuple(map(tuple, current.board)))

        for move in current.get_moves():
            new_state = current.move(move)
            if tuple(map(tuple, new_state.board)) not in visited:
                heapq.heappush(queue, new_state)

def print_solution(solution):
    path = []
    while solution:
        path.append(solution.board)
        solution = solution.prev
    for board in reversed(path):
        print(board)

if __name__ == "__main__":
    initial_board = np.array([[1, 2, 3], [5, 6, 0], [7, 8, 4]])
    solution = a_star_search(initial_board)
    if solution:
        print("Solution found:")
        print_solution(solution)
    else:
        print("No solution exists.")
