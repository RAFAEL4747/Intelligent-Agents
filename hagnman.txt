class HangmanGame:
    def __init__(self, word):
        self.word = word.lower()
        self.guessed_letters = set()
        self.incorrect_guesses = 0
        self.max_incorrect_guesses = 6
        self.word_progress = ['_' for _ in self.word]

    def display_progress(self):
        print(" ".join(self.word_progress))
        print(f"Guessed letters: {', '.join(sorted(self.guessed_letters))}")
        print(f"Incorrect guesses: {self.incorrect_guesses}/{self.max_incorrect_guesses}")

    def is_game_over(self):
        return self.incorrect_guesses >= self.max_incorrect_guesses or '_' not in self.word_progress

    def is_win(self):
        return '_' not in self.word_progress

    def p1_give_clue(self):
        """User inputted clue from P1."""
        while True:
            clue_letter = input("P1 (Clue): Enter a single letter clue: ").lower()
            if len(clue_letter) == 1 and clue_letter.isalpha():
                break
            else:
                print("Invalid input. Please enter a single letter.")

        if clue_letter in self.guessed_letters:
            print("That letter has already been given.")
            return

        self.guessed_letters.add(clue_letter)

        if clue_letter in self.word:
            for i, letter in enumerate(self.word):
                if letter == clue_letter:
                    self.word_progress[i] = clue_letter
        else:
            self.incorrect_guesses+=1

        self.display_progress()

    def p2_guess_letter(self):
        """User inputted guess from P2."""
        while True:
            guess_letter = input("P2 (Guess): Enter a single letter guess: ").lower()
            if len(guess_letter) == 1 and guess_letter.isalpha():
                break
            else:
                print("Invalid input. Please enter a single letter.")

        if guess_letter in self.guessed_letters:
            print("That letter has already been guessed.")
            return

        self.guessed_letters.add(guess_letter)

        if guess_letter in self.word:
            for i, letter in enumerate(self.word):
                if letter == guess_letter:
                    self.word_progress[i] = guess_letter
        else:
            self.incorrect_guesses += 1

        self.display_progress()

def play_hangman(word):
    game = HangmanGame(word)
    print("Let's play Hangman!")
    game.display_progress()

    while not game.is_game_over():
        game.p1_give_clue()
        if game.is_game_over():
            break;
        game.p2_guess_letter()

    if game.is_win():
        print("P2 wins! The word was:", game.word)
    else:
        print("P1 wins! The word was:", game.word)

# Example usage:
word_to_guess = input("Enter the word to guess: ")
play_hangman(word_to_guess)