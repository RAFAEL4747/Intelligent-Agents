def is_safe(board, row, col):
    """Checks if it's safe to place a queen at board[row][col]."""
    for i in range(col):
        if board[row][i] == 1:
            return False

    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    for i, j in zip(range(row, len(board), 1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    return True

def solve_8_queens_all(board, col):
    """Solves the 8 queens problem by placing all queens at once."""
    if col >= len(board):
        return True

    for i in range(len(board)):
        if is_safe(board, i, col):
            board[i][col] = 1

            if solve_8_queens_all(board, col + 1):
                return True

            board[i][col] = 0

    return False

def solve_8_queens_one_by_one(board, queens_placed):
    """Solves the 8 queens problem by placing queens one by one."""
    if queens_placed == len(board):
        return True

    for row in range(len(board)):
        col = queens_placed
        if is_safe(board, row, col):
            board[row][col] = 1

            if solve_8_queens_one_by_one(board, queens_placed + 1):
                return True

            board[row][col] = 0

    return False

def print_board(board):
    """Prints the chessboard."""
    for row in board:
        print(" ".join("Q" if cell == 1 else "." for cell in row))
    print()

def solve_8_queens():
    board = [[0 for _ in range(8)] for _ in range(8)]

    print("Solving 8 Queens (all at once):")
    board_all = [row[:] for row in board] # creates a copy
    if solve_8_queens_all(board_all, 0):
        print_board(board_all)
    else:
        print("No solution found (all at once).")

    print("Solving 8 Queens (one by one):")
    board_one_by_one = [row[:] for row in board] # creates a copy
    if solve_8_queens_one_by_one(board_one_by_one, 0):
        print_board(board_one_by_one)
    else:
        print("No solution found (one by one).")

solve_8_queens()